Transform: AWS::Serverless-2016-10-31
Resources:
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  CreateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-CreateItem
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateItem
      CodeUri: CreateItem
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          ITEMS_TABLE_NAME:
            Ref: Items
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: Items
      Events:
        ApiPOSTitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: POST
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: CreateItem
  UpdateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-UpdateItem
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateItem
      CodeUri: UpdateItem
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          ITEMS_TABLE_NAME:
            Ref: Items
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: Items
      Events:
        ApiPUTitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: PUT
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: UpdateItem
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: cron(0 14 * * ? *)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn:
          Fn::GetAtt:
          - TextSender
          - Arn
        RoleArn:
          Fn::GetAtt:
          - ScheduleToTextSenderRole
          - Arn
  TextSender:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TextSender
      CodeUri: TextSender
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 900
      Tracing: Active
    Metadata:
      SamResourceId: TextSender
  TextSenderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TextSender}
  ScheduleToTextSenderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              Fn::Sub: scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub:
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: Schedule
      Policies:
      - PolicyName: StartExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - TextSender
              - Arn
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /items/{id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItem.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItem.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Compute
      Members:
      - UpdateItem
      - CreateItem
    Group2:
      Label: MessageSender
      Members:
      - Schedule
      - TextSender
