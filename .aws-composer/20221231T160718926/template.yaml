Transform: AWS::Serverless-2016-10-31
Resources:
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  CreateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateItem
      CodeUri: src/CreateItem
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Items
  UpdateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateItem
      CodeUri: src/UpdateItem
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 900
      Tracing: Active
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Items
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(1 minute)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt Function.Arn
        RoleArn: !GetAtt ScheduleToFunctionRole.Arn
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}
  ScheduleToFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: Schedule
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Function.Arn
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Compute
      Members:
        - UpdateItem
        - CreateItem
    Group2:
      Label: MessageSender
      Members:
        - Function
        - Schedule
    Group3:
      Label: Group3
      Members: []